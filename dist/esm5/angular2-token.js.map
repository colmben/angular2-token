{
  "version": 3,
  "file": "angular2-token.js",
  "sources": [
    "ng://angular2-token/out/angular2-token.interceptor.ts",
    "ng://angular2-token/out/a2t-ui/a2t-ui.module.ts",
    "ng://angular2-token/out/a2t-ui/a2t-ui.routes.ts",
    "ng://angular2-token/out/a2t-ui/a2t-update-password/a2t-update-password.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-reset-password/a2t-reset-password.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-sign-up/a2t-sign-up.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-sign-in/a2t-sign-in.component.ts",
    "ng://angular2-token/out/angular2-token.service.ts",
    "ng://angular2-token/out/a2t-ui/a2t-ui.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-shared.module.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-headline/a2t-headline.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-error/a2t-error.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-links/a2t-links.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-form/a2t-form.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-form/a2t-form-field/a2t-form-field.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-ui.forms.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-form/a2t-form.service.ts"
  ],
  "sourcesContent": [
    "import {Injectable} from '@angular/core';\nimport {\n    HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse, HttpErrorResponse\n}\n    from '@angular/common/http';\nimport {Angular2TokenService} from './angular2-token.service';\nimport {Observable} from 'rxjs/Observable';\nimport {tap} from 'rxjs/operators';\nimport {AuthData} from \"./angular2-token.model\";\n\n@Injectable()\nexport class Angular2TokenInteceptor implements HttpInterceptor {\n    apiPath: string;\n\n    constructor(private _tokenService: Angular2TokenService) {\n        this.apiPath = this._tokenService.apiPath;\n    }\n\n    intercept(req: HttpRequest<any>,\n              next: HttpHandler): Observable<HttpEvent<any>> {\n        console.log('In token interceptor, request : ', req,\n            this._tokenService.currentAuthHeaders);\n        let headersWithAuth = this._tokenService.currentAuthHeaders;\n        const apiPath =\n            req.headers.keys().forEach(key => {\n                headersWithAuth = headersWithAuth.append(key, req.headers.get(key))\n            });\n        console.log('In intercept request, new headers : ', headersWithAuth);\n        if (req.url.match(this.apiPath)) {\n            req = req.clone({headers: headersWithAuth});\n            const authHeaders = this._tokenService.currentAuthHeaders;\n            authHeaders.keys().forEach(key => {\n                req.headers.append(key, authHeaders.get(key))\n            });\n        }\n\n\n        return next.handle(req)\n            .pipe(\n                tap(res => {\n                        console.log('In token interceptor, evt : ', res);\n                        if (res instanceof HttpResponse && res.url.match(this.apiPath)) {\n                            console.log('---> status:', res.status);\n                            console.log('---> filter:', req.params.get('filter'));\n                            this.getAuthHeadersFromResponse(<any>res);\n                        }\n                    },\n                    err => {\n                        console.log('In token interceptor, err : ', err);\n                        if (err instanceof HttpErrorResponse && err.url && err.url.match(this.apiPath)) {\n                            console.log('In token interceptor, HTTP err : ', err);\n                            this.getAuthHeadersFromResponse(<any>err);\n                        } else {\n                            console.log(\"Auth Interceptor, non HTTP or no headers error - \", err)\n                        }\n\n\n                    }\n                )\n            )\n    }\n\n\n    // Parse Auth data from response\n    private getAuthHeadersFromResponse(data: any): void {\n        let headers = data.headers;\n\n        let authData: AuthData = {\n            accessToken: headers.get('access-token'),\n            client: headers.get('client'),\n            expiry: headers.get('expiry'),\n            tokenType: headers.get('token-type'),\n            uid: headers.get('uid')\n        };\n\n        this._tokenService.currentAuthData = authData;\n    }\n\n}",
    "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport {\n    a2tRoutes,\n    A2tUiComponent,\n    A2tSharedModule,\n} from './';\n\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        A2tSharedModule,\n        a2tRoutes\n    ],\n    declarations: [\n        A2tUiComponent,\n        A2tSignInComponent,\n        A2tSignUpComponent,\n        A2tResetPasswordComponent,\n        A2tUpdatePasswordComponent\n    ]\n})\nexport class A2tUiModule { }",
    "import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport { A2tUiComponent } from './a2t-ui.component';\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\nconst routes: Routes = [{\n        path: 'session',\n        component: A2tUiComponent,\n        children: [\n            { path: 'sign-in', component: A2tSignInComponent },\n            { path: 'sign-up', component: A2tSignUpComponent },\n            { path: 'reset-password', component: A2tResetPasswordComponent },\n            {\n                path: 'update-password',\n                component: A2tUpdatePasswordComponent,\n                canActivate: [Angular2TokenService]\n            }\n        ]\n}];\n\nexport const a2tRoutes = RouterModule.forChild(routes);\n",
    "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { UpdatePasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { UPDATE_PASSWORD_FORM } from '../';\n\n@Component({\n    selector:   'a2t-update-password',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Update your Password</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Update Password</a2t-form>\n    `\n})\nexport class A2tUpdatePasswordComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(UPDATE_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: UpdatePasswordData) => this._sessionService.updatePassword(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._router.navigate(['session/sign-in']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { ResetPasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { RESET_PASSWORD_FORM } from '../';\n\n@Component({\n    selector:       'a2t-reset-password',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline *ngIf=\"!_emailSend\">Reset your Password</a2t-headline>\n        <a2t-form *ngIf=\"!_emailSend\">Reset Password</a2t-form>\n        <p class=\"email-send-text\" *ngIf=\"_emailSend\">\n            If the entered email is registered we will send instruction on how to reset your password.\n        </p>\n        <a2t-links *ngIf=\"!_emailSend\" case=\"reset-password\"></a2t-links>\n    `,\n    styles: [`\n        .email-send-text {\n            background-color: #72c380;\n            color: white;\n            font-size: 16pt;\n            text-align: center;\n            padding: 20px;\n            border-radius: 3px;\n        }\n    `]\n})\nexport class A2tResetPasswordComponent {\n\n    _emailSend: boolean = false;\n\n    constructor(\n        private _formService: A2tFormService,\n        private _sessionService: Angular2TokenService\n    ) {\n        this._formService.initForm(RESET_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: ResetPasswordData) => this._sessionService.resetPassword(data).subscribe(\n                res =>      this._handleSuccess(),\n                error =>    this._handleError()\n            )\n        );\n    }\n\n    private _handleSuccess() {\n        this._emailSend = true;\n    }\n\n    private _handleError() {\n        this._emailSend = true;\n    }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { RegisterData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_UP_FORM } from '../';\n\n@Component({\n    selector:       'a2t-sign-up',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline>Sign Up</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign Up</a2t-form>\n        <a2t-links case=\"sign-up\"></a2t-links>\n    `\n})\nexport class A2tSignUpComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(SIGN_UP_FORM);\n        this._formService.submit$.subscribe(\n            (data: RegisterData) => this._sessionService.registerAccount(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors.full_messages;\n        this._formService.unlockSubmit();\n    }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { SignInData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_IN_FORM } from '../';\n\n@Component({\n    selector:   'a2t-sign-in',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Sign In</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign In</a2t-form>\n        <a2t-links case=\"sign-in\"></a2t-links>\n    `\n})\nexport class A2tSignInComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(SIGN_IN_FORM);\n        this._formService.submit$.subscribe(\n            (data: SignInData) => this._sessionService.signIn(data).subscribe(\n                (res: any) =>   this._handleSuccess(res),\n                (error: any) => this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\n}\n",
    "import {Injectable, Optional} from '@angular/core';\nimport {ActivatedRoute, Router, CanActivate} from '@angular/router';\nimport {\n    HttpClient,\n    HttpResponse,\n    HttpHeaders,\n} from \"@angular/common/http\";\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/operator/pluck';\nimport 'rxjs/add/operator/filter';\nimport * as urlParse from 'url-parse';\nimport {\n    SignInData,\n    RegisterData,\n    UpdatePasswordData,\n    ResetPasswordData,\n\n    UserType,\n    UserData,\n    AuthData,\n\n    Angular2TokenOptions\n} from './angular2-token.model';\nimport {finalize, map, tap} from \"rxjs/operators\";\nimport \"rxjs/add/operator/finally\";\n\n\n\n@Injectable()\nexport class Angular2TokenService implements CanActivate {\n\n    get currentUserType(): string {\n        if (this.atCurrentUserType != null)\n            return this.atCurrentUserType.name;\n        else\n            return null;\n    }\n\n    get currentUserData(): UserData {\n        return this.atCurrentUserData;\n    }\n\n    get currentAuthData(): AuthData {\n        return this.atCurrentAuthData;\n    }\n\n    get currentAuthHeaders(): HttpHeaders {\n        if (this.atCurrentAuthData != null) {\n            return new HttpHeaders({\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client': this.atCurrentAuthData.client,\n                'expiry': this.atCurrentAuthData.expiry,\n                'token-type': this.atCurrentAuthData.tokenType,\n                'uid': this.atCurrentAuthData.uid\n            });\n        }\n\n        return new HttpHeaders;\n    }\n\n    get apiPath(): string {\n        return this.getApiPath();\n    }\n\n    set currentAuthData(authData: AuthData) {\n        this.setAuthData(authData);\n    }\n\n    private atOptions: Angular2TokenOptions;\n    private atCurrentUserType: UserType;\n    private atCurrentAuthData: AuthData;\n    private atCurrentUserData: UserData;\n\n    constructor(private http: HttpClient,\n                @Optional() private activatedRoute: ActivatedRoute,\n                @Optional() private router: Router) {\n    }\n\n    userSignedIn(): boolean {\n        return !!this.atCurrentAuthData;\n    }\n\n    canActivate(): boolean {\n        if (this.userSignedIn())\n            return true;\n        else {\n            // Store current location in storage (usefull for redirection after signing in)\n            if (this.atOptions.signInStoredUrlStorageKey) {\n                localStorage.setItem(\n                    this.atOptions.signInStoredUrlStorageKey,\n                    window.location.pathname + window.location.search\n                );\n            }\n\n            // Redirect user to sign in if signInRedirect is set\n            if (this.router && this.atOptions.signInRedirect)\n                this.router.navigate([this.atOptions.signInRedirect]);\n\n            return false;\n        }\n    }\n\n    // Inital configuration\n    init(options?: Angular2TokenOptions) {\n\n        let defaultOptions: Angular2TokenOptions = {\n            apiPath: null,\n            apiBase: null,\n\n            signInPath: 'auth/sign_in',\n            signInRedirect: null,\n            signInStoredUrlStorageKey: null,\n\n            signOutPath: 'auth/sign_out',\n            validateTokenPath: 'auth/validate_token',\n            signOutFailedValidate: false,\n\n            registerAccountPath: 'auth',\n            deleteAccountPath: 'auth',\n            registerAccountCallback: window.location.href,\n\n            updatePasswordPath: 'auth',\n\n            resetPasswordPath: 'auth/password',\n            resetPasswordCallback: window.location.href,\n\n            userTypes: null,\n\n            oAuthBase: window.location.origin,\n            oAuthPaths: {\n                github: 'auth/github'\n            },\n            oAuthCallbackPath: 'oauth_callback',\n            oAuthWindowType: 'newWindow',\n            oAuthWindowOptions: null,\n\n            globalOptions: {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }\n        };\n\n        this.atOptions = (<any>Object).assign(defaultOptions, options);\n\n        this.tryLoadAuthData();\n    }\n\n    /**\n     *\n     * Actions\n     *\n     */\n\n    // Register request\n    registerAccount(registerData: RegisterData): Observable<any> {\n\n        if (registerData.userType == null)\n            this.atCurrentUserType = null;\n        else {\n            this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n            delete registerData.userType;\n        }\n\n        registerData.password_confirmation = registerData.passwordConfirmation;\n        delete registerData.passwordConfirmation;\n\n        registerData.confirm_success_url = this.atOptions.registerAccountCallback;\n\n        return this.request('POST', this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n    }\n\n    // Delete Account\n    deleteAccount(): Observable<any> {\n        return this.request('DELETE', this.getUserPath() + this.atOptions.deleteAccountPath);\n    }\n\n    // Sign in request and set storage\n    signIn(signInData: SignInData): Observable<any> {\n        console.log('In singIn tap!');\n\n        if (signInData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n\n        let body = JSON.stringify({\n            email: signInData.email,\n            password: signInData.password\n        });\n\n        let observ = this.request<{ data:UserData}>('POST', this.getUserPath() + this.atOptions.signInPath, body);\n\n        console.log('In singIn tap, returned observ : ', observ);\n        return observ.pipe(\n            tap(\n                res => {\n                        console.log('In singIn tap, res  : ', res);\n                        this.atCurrentUserData = res.data;\n                    console.log('In singIn tap, this.atCurrentUserData  : ', this.atCurrentUserData);\n\n                }, err => {\n                    console.log('In singIn tap, error : ', err);\n                }));\n\n    }\n\n    signInOAuth(oAuthType: string) {\n\n        let oAuthPath: string = this.getOAuthPath(oAuthType);\n        let callbackUrl: string = `${window.location.origin}/${this.atOptions.oAuthCallbackPath}`;\n        let oAuthWindowType: string = this.atOptions.oAuthWindowType;\n        let authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n        if (oAuthWindowType == 'newWindow') {\n            let oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n            let windowOptions = '';\n\n            if (oAuthWindowOptions) {\n                for (let key in oAuthWindowOptions) {\n                    windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n                }\n            }\n\n            let popup = window.open(\n                authUrl,\n                '_blank',\n                `closebuttoncaption=Cancel${windowOptions}`\n            );\n            return this.requestCredentialsViaPostMessage(popup);\n        } else if (oAuthWindowType == 'sameWindow') {\n            window.location.href = authUrl;\n        } else {\n            throw `Unsupported oAuthWindowType \"${oAuthWindowType}\"`;\n        }\n    }\n\n    processOAuthCallback(): void {\n        this.getAuthDataFromParams();\n    }\n\n    // Sign out request and delete storage\n    signOut(): Observable<any> {\n        let observ = this.request('DELETE', this.getUserPath() + this.atOptions.signOutPath);\n        observ.finally(() => {\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('client');\n            localStorage.removeItem('expiry');\n            localStorage.removeItem('tokenType');\n            localStorage.removeItem('uid');\n\n            this.atCurrentAuthData = null;\n            this.atCurrentUserType = null;\n            this.atCurrentUserData = null;\n        });\n\n\n        return observ;\n    }\n\n    // Validate token request\n    validateToken(): Observable<any> {\n        let observ = this.request<{success: Boolean, data: UserData}>('GET', this.getUserPath() + this.atOptions.validateTokenPath);\n\n        return observ.pipe(\n            tap(\n                res => {\n                    if (res.data) {\n                        console.log('in validateResponse, res : ', res);\n                        this.atCurrentUserData = res.data;\n                    }\n                },\n                error => {\n                    if (error.status === 401 && this.atOptions.signOutFailedValidate) {\n                        this.signOut();\n                    }\n                }\n            ));\n\n\n    }\n\n    // Update password request\n    updatePassword(updatePasswordData: UpdatePasswordData): Observable<any> {\n\n        if (updatePasswordData.userType != null)\n            this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n\n        let args: any;\n\n        if (updatePasswordData.passwordCurrent == null) {\n            args = {\n                password: updatePasswordData.password,\n                password_confirmation: updatePasswordData.passwordConfirmation\n            }\n        } else {\n            args = {\n                current_password: updatePasswordData.passwordCurrent,\n                password: updatePasswordData.password,\n                password_confirmation: updatePasswordData.passwordConfirmation\n            };\n        }\n        // Redo the header load in case this is a forgot password scenario and we need to get the headers from the\n        // redirected URL\n        this.tryLoadAuthData();\n\n        let body = JSON.stringify(args);\n\n        return this.request('PUT', this.getUserPath() + this.atOptions.updatePasswordPath, body);\n    }\n\n    // Reset password request\n    resetPassword(resetPasswordData: ResetPasswordData): Observable<any> {\n\n        if (resetPasswordData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n\n        let body = JSON.stringify({\n            email: resetPasswordData.email,\n            redirect_url: this.atOptions.resetPasswordCallback\n        });\n\n        return this.request('POST', this.getUserPath() + this.atOptions.resetPasswordPath, body);\n    }\n\n\n    // Construct and send Http request\n    request<T>(method: string, url: string, body?: any): Observable<T> {\n\n        const options: { [key: string]: any; } = {};\n\n        let baseHeaders: { [key: string]: string; } = this.atOptions.globalOptions.headers;\n\n        options.headers = new HttpHeaders(baseHeaders);\n\n        options.body = body;\n\n        const response = this.http.request<T>(method, this.getApiPath() + url, options);\n\n        return response\n    }\n\n    /**\n     *\n     * Get Auth Data\n     *\n     */\n\n    // Try to load auth data\n    private tryLoadAuthData(): void {\n\n        let userType = this.getUserTypeByName(localStorage.getItem('userType'));\n\n        if (userType)\n            this.atCurrentUserType = userType;\n\n        this.getAuthDataFromStorage();\n\n        this.getAuthDataFromParams();\n\n        if (this.atCurrentAuthData)\n            this.validateToken();\n    }\n\n    // Parse Auth data from post message\n    private getAuthDataFromPostMessage(data: any): void {\n        let authData: AuthData = {\n            accessToken: data['auth_token'],\n            client: data['client_id'],\n            expiry: data['expiry'],\n            tokenType: 'Bearer',\n            uid: data['uid']\n        };\n\n        this.setAuthData(authData);\n    }\n\n    // Try to get auth data from storage.\n    private getAuthDataFromStorage(): void {\n\n        let authData: AuthData = {\n            accessToken: localStorage.getItem('accessToken'),\n            client: localStorage.getItem('client'),\n            expiry: localStorage.getItem('expiry'),\n            tokenType: localStorage.getItem('tokenType'),\n            uid: localStorage.getItem('uid')\n        };\n\n        if (this.checkAuthData(authData))\n            this.atCurrentAuthData = authData;\n    }\n\n    // Try to get auth data from url parameters.\n    private getAuthDataFromParams(): void {\n        const url = new urlParse(window.location.href, true);\n        if(url && url.query) {\n            let authData: AuthData = {\n                accessToken: url.query['token'] || url.query['auth_token'],\n                client: url.query['client_id'],\n                expiry: url.query['expiry'],\n                tokenType: 'Bearer',\n                uid: url.query['uid']\n            };\n\n            if (this.checkAuthData(authData)){\n                this.atCurrentAuthData = authData;\n\n            }\n        }\n    }\n\n    /**\n     *\n     * Set Auth Data\n     *\n     */\n\n    // Write auth data to storage\n    private setAuthData(authData: AuthData): void {\n\n        if (this.checkAuthData(authData)) {\n\n            this.atCurrentAuthData = authData;\n\n            localStorage.setItem('accessToken', authData.accessToken);\n            localStorage.setItem('client', authData.client);\n            localStorage.setItem('expiry', authData.expiry);\n            localStorage.setItem('tokenType', authData.tokenType);\n            localStorage.setItem('uid', authData.uid);\n\n            if (this.atCurrentUserType != null)\n                localStorage.setItem('userType', this.atCurrentUserType.name);\n\n        }\n    }\n\n    /**\n     *\n     * Validate Auth Data\n     *\n     */\n\n    // Check if auth data complete and if response token is newer\n    private checkAuthData(authData: AuthData): boolean {\n\n        if (\n            authData.accessToken != null &&\n            authData.client != null &&\n            authData.expiry != null &&\n            authData.tokenType != null &&\n            authData.uid != null\n        ) {\n            if (this.atCurrentAuthData != null)\n                return authData.expiry >= this.atCurrentAuthData.expiry;\n            else\n                return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * Construct Paths / Urls\n     *\n     */\n\n    private getUserPath(): string {\n        if (this.atCurrentUserType == null)\n            return '';\n        else\n            return this.atCurrentUserType.path + '/';\n    }\n\n    private getApiPath(): string {\n        let constructedPath = '';\n\n        if (this.atOptions.apiBase != null)\n            constructedPath += this.atOptions.apiBase + '/';\n\n        if (this.atOptions.apiPath != null)\n            constructedPath += this.atOptions.apiPath + '/';\n\n        return constructedPath;\n    }\n\n    private getOAuthPath(oAuthType: string): string {\n        let oAuthPath: string;\n\n        oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n\n        if (oAuthPath == null)\n            oAuthPath = `/auth/${oAuthType}`;\n\n        return oAuthPath;\n    }\n\n    private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n        let url: string;\n\n        url = `${this.atOptions.oAuthBase}/${oAuthPath}`;\n        url += `?omniauth_window_type=${windowType}`;\n        url += `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n        if (this.atCurrentUserType != null)\n            url += `&resource_class=${this.atCurrentUserType.name}`;\n\n        return url;\n    }\n\n    /**\n     *\n     * OAuth\n     *\n     */\n\n    private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n        let pollerObserv = Observable.interval(500);\n\n        let responseObserv = Observable.fromEvent(window, 'message').pluck('data')\n            .filter(this.oAuthWindowResponseFilter);\n\n        let responseSubscription = responseObserv.subscribe(\n            this.getAuthDataFromPostMessage.bind(this)\n        );\n\n        let pollerSubscription = pollerObserv.subscribe(() => {\n            if (authWindow.closed)\n                pollerSubscription.unsubscribe();\n            else\n                authWindow.postMessage('requestCredentials', '*');\n        });\n\n        return responseObserv;\n    }\n\n    private oAuthWindowResponseFilter(data: any): any {\n        if (data.message == 'deliverCredentials' || data.message == 'authFailure')\n            return data;\n    }\n\n    /**\n     *\n     * Utilities\n     *\n     */\n\n    // Match user config by user config name\n    private getUserTypeByName(name: string): UserType {\n        if (name == null || this.atOptions.userTypes == null)\n            return null;\n\n        return this.atOptions.userTypes.find(\n            userType => userType.name === name\n        );\n    }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../angular2-token.service';\n\n@Component({\n    selector:   'a2t-ui',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <div class=\"a2t-container\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            width: 100%;\n            height: 100vh;\n            min-height: 500px;\n\n            padding-top: 100px;\n\n            display: flex;\n            justify-content: center;\n\n            background-color: #3270a0;\n        }\n\n        .a2t-logo {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n\n        .a2t-container {\n            width: 400px;\n        }\n    `]\n})\nexport class A2tUiComponent {\n    constructor() { }\n}\n",
    "import { NgModule }     from '@angular/core';\nimport { ReactiveFormsModule }  from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { A2tFormComponent, A2tFormFieldComponent } from './a2t-form';\nimport { A2tLinksComponent } from './a2t-links/a2t-links.component';\nimport { A2tErrorComponent } from './a2t-error/a2t-error.component';\nimport { A2tHeadlineComponent } from './a2t-headline/a2t-headline.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        RouterModule\n    ],\n    declarations: [\n        A2tFormFieldComponent,\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ],\n    exports: [\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ]\n})\nexport class A2tSharedModule { }\n",
    "import { Component } from '@angular/core';\n\n@Component({\n    selector:   'a2t-headline',\n    template:   '<p><ng-content></ng-content></p>',\n    styles:  [`\n        p {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n    `]\n})\nexport class A2tHeadlineComponent {\n    constructor() { }\n}",
    "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector:   'a2t-error',\n    template:   '<div *ngFor=\"let error of errors\"><p>{{error}}</p></div>',\n    styles: [`\n        div {\n            width: 100%;\n            background-color: #df6564;\n            color: white;\n            font-weight: 300;\n            font-size: 15px;\n            padding: 10px 20px;\n            border-radius: 3px;\n            margin-bottom: 15px;\n        }\n\n        div > p {\n            margin-bottom: 0;\n        }\n    `]\n})\nexport class A2tErrorComponent {\n\n    @Input() errors: string[];\n\n    constructor() { }\n}",
    "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector:   'a2t-links',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <p><a routerLink=\"/session/reset-password\" *ngIf=\"case != 'reset-password'\">Forgot Password?</a></p>\n            <p><a routerLink=\"/session/sign-up\" *ngIf=\"case != 'sign-up'\">Sign Up</a></p>\n            <p><a routerLink=\"/session/sign-in\" *ngIf=\"case != 'sign-in'\">Sign In</a></p>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            margin-top: 20px;\n        }\n\n        p {\n            margin-bottom: 0;\n        }\n\n        a {\n            color: #eee !important;\n            transition: .3s;\n            text-decoration: none;\n            font-size: 15px;\n            font-weight: 300;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        a:hover {\n            color: white;\n        }\n    `]\n})\nexport class A2tLinksComponent {\n\n    @Input() case: string;\n\n    constructor() { }\n}",
    "import { Component }  from '@angular/core';\n\nimport { A2tFormService } from './a2t-form.service';\nimport { A2tFormFieldComponent } from './a2t-form-field/a2t-form-field.component';\n\n@Component({\n    selector: 'a2t-form',\n    template: `\n        <form class=\"a2t-form\"\n            (ngSubmit)=\"_formService.submit()\"\n            [formGroup]=\"_formService.formGroup\">\n\n            <a2t-form-field\n                *ngFor=\"let field of this._formService.fields\"\n                [question]=\"field\"\n                [form]=\"_formService.formGroup\">\n            </a2t-form-field>\n\n            <button type=\"submit\" [disabled]=\"!_formService.formGroup.valid || _formService.formGroup.pristine || _formService.submitLock\">\n                <ng-content *ngIf=\"!_formService.submitLock\"></ng-content>\n                <span *ngIf=\"_formService.submitLock\">Submitting ...</span>\n            </button>\n        </form>\n    `,\n    styles: [`\n        .a2t-form {\n            background-color: white;\n            border-radius: 3px;\n            box-shadow: 0px 1px 5px 0 rgba(0,0,0,0.3);\n            padding-top: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-form button {\n            width: 100%;\n\n            transition: .3s;\n            background-color: #72c380;\n\n            border-bottom-right-radius: 3px;\n            border-bottom-left-radius: 3px;\n\n            outline: none;\n            text-align: center;\n            font-weight: 400;\n            border: none;\n            font-size: 16px;\n            line-height: 30px;\n\n            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n            color: white;\n            border-bottom: 3px solid transparent;\n        }\n\n        .a2t-form button:disabled {\n            background-color: #eee !important;\n            cursor: not-allowed;\n            color: #999;\n            text-shadow: none;\n        }\n\n        .a2t-form button:hover {\n            background-color: #a6d9ae;\n        }\n    `]\n})\n\nexport class A2tFormComponent {\n    constructor(public _formService: A2tFormService) { }\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\n\nimport { BaseField } from '../../../a2t-ui.forms';\n\n@Component({\n    selector:   'a2t-form-field',\n    template: `\n        <div class=\"a2t-input-group\"\n            [formGroup]=\"form\">\n\n            <label\n                [attr.for]=\"question.key\"\n                [style.color]=\"labelColor\"\n                *ngIf=\"_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('required') && !_control.pristine\">\n                {{question.label}} is required\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('minlength')\">\n                {{question.label}} is too short\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('maxlength')\">\n                {{question.label}} is too long\n            </label>\n\n            <label class=\"a2t-valid\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.valid && !_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <input\n                [formControlName]=\"question.key\"\n                [id]=\"question.key\"\n                [type]=\"question.type\">\n        </div>\n    `,\n    styles: [`\n        .a2t-input-group {\n            padding-bottom: 40px;\n            padding-right: 20px;\n            padding-left: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-input-group input {\n            width: 100%;\n            outline: none;\n            border: none;\n            background-color: #eee;\n            line-height: 40px;\n\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n\n        .a2t-input-group label {\n            color: #666;\n            font-weight: 600;\n            font-size: 13px;\n            margin-bottom: 0;\n        }\n\n        .a2t-error {\n            color: #df6564 !important;\n        }\n\n        .a2t-valid {\n            color: #72c380 !important;\n        }\n    `]\n})\n\nexport class A2tFormFieldComponent implements OnInit {\n\n    @Input() question:  BaseField;\n    @Input() form:      FormGroup;\n\n    _control:   AbstractControl;\n\n    ngOnInit() {\n        this._control = this.form.controls[this.question.key];\n    }\n\n    get isValid() {\n        return this._control.valid;\n    }\n}\n",
    "import { Validators } from '@angular/forms';\n\nexport class BaseField{\n    value: string;\n    key: string;\n    label: string;\n    type: string;\n    validators: any[];\n\n    constructor(options: {\n        value?: string,\n        key?: string,\n        label?: string,\n        type?: string,\n        validators?: any[],\n    } = {}) {\n        this.value = options.value;\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.validators = options.validators === undefined ? [] : options.validators;\n        this.type = options.type || '';\n    }\n}\n\nexport const SIGN_IN_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const SIGN_UP_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const RESET_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const UPDATE_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordCurrent',\n        label: 'Old Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];",
    "import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\n\nimport { SignInData } from '../../../angular2-token.model';\nimport { BaseField } from '../../a2t-ui.forms';\n\n@Injectable()\nexport class A2tFormService {\n\n    // Submit Event\n    public submit$ = new EventEmitter<any>();\n    public submitLock: boolean = false;\n\n    // Form Building\n    public formGroup: FormGroup;\n    public fields: BaseField[];\n\n    constructor() { }\n\n    public initForm(fields: BaseField[]) {\n        this.fields = fields;\n        this._createFormGroup();\n    }\n\n    public submit() {\n        this.submitLock = true;\n        this.submit$.emit(this.formGroup.value);\n    }\n\n    public unlockSubmit() {\n        this.formGroup.reset();\n        this.submitLock = false;\n    };\n\n    private _createFormGroup() {\n\n        let group: any = {};\n\n        this.fields.forEach(question => {\n            group[question.key] = new FormControl(null, question.validators);\n        });\n\n        this.formGroup = new FormGroup(group);\n    }\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
