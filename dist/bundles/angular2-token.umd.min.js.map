{
  "version": 3,
  "file": "angular2-token.umd.min.js",
  "sources": [
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-form/a2t-form.service.ts",
    "ng://angular2-token/out/a2t-ui/a2t-ui.forms.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-form/a2t-form-field/a2t-form-field.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-form/a2t-form.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-links/a2t-links.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-error/a2t-error.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-headline/a2t-headline.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-shared/a2t-shared.module.ts",
    "ng://angular2-token/out/a2t-ui/a2t-ui.component.ts",
    "ng://angular2-token/out/angular2-token.service.ts",
    "ng://angular2-token/out/a2t-ui/a2t-sign-in/a2t-sign-in.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-sign-up/a2t-sign-up.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-reset-password/a2t-reset-password.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-update-password/a2t-update-password.component.ts",
    "ng://angular2-token/out/a2t-ui/a2t-ui.routes.ts",
    "ng://angular2-token/out/a2t-ui/a2t-ui.module.ts",
    "ng://angular2-token/out/angular2-token.interceptor.ts"
  ],
  "sourcesContent": [
    "import { Injectable, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\n\nimport { SignInData } from '../../../angular2-token.model';\nimport { BaseField } from '../../a2t-ui.forms';\n\n@Injectable()\nexport class A2tFormService {\n\n    // Submit Event\n    public submit$ = new EventEmitter<any>();\n    public submitLock: boolean = false;\n\n    // Form Building\n    public formGroup: FormGroup;\n    public fields: BaseField[];\n\n    constructor() { }\n\n    public initForm(fields: BaseField[]) {\n        this.fields = fields;\n        this._createFormGroup();\n    }\n\n    public submit() {\n        this.submitLock = true;\n        this.submit$.emit(this.formGroup.value);\n    }\n\n    public unlockSubmit() {\n        this.formGroup.reset();\n        this.submitLock = false;\n    };\n\n    private _createFormGroup() {\n\n        let group: any = {};\n\n        this.fields.forEach(question => {\n            group[question.key] = new FormControl(null, question.validators);\n        });\n\n        this.formGroup = new FormGroup(group);\n    }\n}\n",
    "import { Validators } from '@angular/forms';\n\nexport class BaseField{\n    value: string;\n    key: string;\n    label: string;\n    type: string;\n    validators: any[];\n\n    constructor(options: {\n        value?: string,\n        key?: string,\n        label?: string,\n        type?: string,\n        validators?: any[],\n    } = {}) {\n        this.value = options.value;\n        this.key = options.key || '';\n        this.label = options.label || '';\n        this.validators = options.validators === undefined ? [] : options.validators;\n        this.type = options.type || '';\n    }\n}\n\nexport const SIGN_IN_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const SIGN_UP_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const RESET_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'email',\n        label: 'Email',\n        type: 'text',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];\n\nexport const UPDATE_PASSWORD_FORM: BaseField[] = [\n    new BaseField({\n        key: 'password',\n        label: 'Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordConfirmation',\n        label: 'Password Confirmation',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    }),\n    new BaseField({\n        key: 'passwordCurrent',\n        label: 'Old Password',\n        type: 'password',\n        validators: [\n            Validators.required,\n            Validators.minLength(8)\n        ]\n    })\n];",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, AbstractControl } from '@angular/forms';\n\nimport { BaseField } from '../../../a2t-ui.forms';\n\n@Component({\n    selector:   'a2t-form-field',\n    template: `\n        <div class=\"a2t-input-group\"\n            [formGroup]=\"form\">\n\n            <label\n                [attr.for]=\"question.key\"\n                [style.color]=\"labelColor\"\n                *ngIf=\"_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('required') && !_control.pristine\">\n                {{question.label}} is required\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('minlength')\">\n                {{question.label}} is too short\n            </label>\n\n            <label class=\"a2t-error\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.hasError('maxlength')\">\n                {{question.label}} is too long\n            </label>\n\n            <label class=\"a2t-valid\"\n                [attr.for]=\"question.key\"\n                *ngIf=\"_control.valid && !_control.pristine\">\n                {{question.label}}\n            </label>\n\n            <input\n                [formControlName]=\"question.key\"\n                [id]=\"question.key\"\n                [type]=\"question.type\">\n        </div>\n    `,\n    styles: [`\n        .a2t-input-group {\n            padding-bottom: 40px;\n            padding-right: 20px;\n            padding-left: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-input-group input {\n            width: 100%;\n            outline: none;\n            border: none;\n            background-color: #eee;\n            line-height: 40px;\n\n            padding-left: 10px;\n            padding-right: 10px;\n        }\n\n        .a2t-input-group label {\n            color: #666;\n            font-weight: 600;\n            font-size: 13px;\n            margin-bottom: 0;\n        }\n\n        .a2t-error {\n            color: #df6564 !important;\n        }\n\n        .a2t-valid {\n            color: #72c380 !important;\n        }\n    `]\n})\n\nexport class A2tFormFieldComponent implements OnInit {\n\n    @Input() question:  BaseField;\n    @Input() form:      FormGroup;\n\n    _control:   AbstractControl;\n\n    ngOnInit() {\n        this._control = this.form.controls[this.question.key];\n    }\n\n    get isValid() {\n        return this._control.valid;\n    }\n}\n",
    "import { Component }  from '@angular/core';\n\nimport { A2tFormService } from './a2t-form.service';\nimport { A2tFormFieldComponent } from './a2t-form-field/a2t-form-field.component';\n\n@Component({\n    selector: 'a2t-form',\n    template: `\n        <form class=\"a2t-form\"\n            (ngSubmit)=\"_formService.submit()\"\n            [formGroup]=\"_formService.formGroup\">\n\n            <a2t-form-field\n                *ngFor=\"let field of this._formService.fields\"\n                [question]=\"field\"\n                [form]=\"_formService.formGroup\">\n            </a2t-form-field>\n\n            <button type=\"submit\" [disabled]=\"!_formService.formGroup.valid || _formService.formGroup.pristine || _formService.submitLock\">\n                <ng-content *ngIf=\"!_formService.submitLock\"></ng-content>\n                <span *ngIf=\"_formService.submitLock\">Submitting ...</span>\n            </button>\n        </form>\n    `,\n    styles: [`\n        .a2t-form {\n            background-color: white;\n            border-radius: 3px;\n            box-shadow: 0px 1px 5px 0 rgba(0,0,0,0.3);\n            padding-top: 20px;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        .a2t-form button {\n            width: 100%;\n\n            transition: .3s;\n            background-color: #72c380;\n\n            border-bottom-right-radius: 3px;\n            border-bottom-left-radius: 3px;\n\n            outline: none;\n            text-align: center;\n            font-weight: 400;\n            border: none;\n            font-size: 16px;\n            line-height: 30px;\n\n            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n            color: white;\n            border-bottom: 3px solid transparent;\n        }\n\n        .a2t-form button:disabled {\n            background-color: #eee !important;\n            cursor: not-allowed;\n            color: #999;\n            text-shadow: none;\n        }\n\n        .a2t-form button:hover {\n            background-color: #a6d9ae;\n        }\n    `]\n})\n\nexport class A2tFormComponent {\n    constructor(public _formService: A2tFormService) { }\n}\n",
    "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector:   'a2t-links',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <p><a routerLink=\"/session/reset-password\" *ngIf=\"case != 'reset-password'\">Forgot Password?</a></p>\n            <p><a routerLink=\"/session/sign-up\" *ngIf=\"case != 'sign-up'\">Sign Up</a></p>\n            <p><a routerLink=\"/session/sign-in\" *ngIf=\"case != 'sign-in'\">Sign In</a></p>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            margin-top: 20px;\n        }\n\n        p {\n            margin-bottom: 0;\n        }\n\n        a {\n            color: #eee !important;\n            transition: .3s;\n            text-decoration: none;\n            font-size: 15px;\n            font-weight: 300;\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Arial, sans-serif;\n        }\n\n        a:hover {\n            color: white;\n        }\n    `]\n})\nexport class A2tLinksComponent {\n\n    @Input() case: string;\n\n    constructor() { }\n}",
    "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector:   'a2t-error',\n    template:   '<div *ngFor=\"let error of errors\"><p>{{error}}</p></div>',\n    styles: [`\n        div {\n            width: 100%;\n            background-color: #df6564;\n            color: white;\n            font-weight: 300;\n            font-size: 15px;\n            padding: 10px 20px;\n            border-radius: 3px;\n            margin-bottom: 15px;\n        }\n\n        div > p {\n            margin-bottom: 0;\n        }\n    `]\n})\nexport class A2tErrorComponent {\n\n    @Input() errors: string[];\n\n    constructor() { }\n}",
    "import { Component } from '@angular/core';\n\n@Component({\n    selector:   'a2t-headline',\n    template:   '<p><ng-content></ng-content></p>',\n    styles:  [`\n        p {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n    `]\n})\nexport class A2tHeadlineComponent {\n    constructor() { }\n}",
    "import { NgModule }     from '@angular/core';\nimport { ReactiveFormsModule }  from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { A2tFormComponent, A2tFormFieldComponent } from './a2t-form';\nimport { A2tLinksComponent } from './a2t-links/a2t-links.component';\nimport { A2tErrorComponent } from './a2t-error/a2t-error.component';\nimport { A2tHeadlineComponent } from './a2t-headline/a2t-headline.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        RouterModule\n    ],\n    declarations: [\n        A2tFormFieldComponent,\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ],\n    exports: [\n        A2tFormComponent,\n        A2tLinksComponent,\n        A2tErrorComponent,\n        A2tHeadlineComponent\n    ]\n})\nexport class A2tSharedModule { }\n",
    "import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../angular2-token.service';\n\n@Component({\n    selector:   'a2t-ui',\n    template: `\n        <div class=\"a2t-wrapper\">\n            <div class=\"a2t-container\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    `,\n    styles: [`\n        .a2t-wrapper {\n            width: 100%;\n            height: 100vh;\n            min-height: 500px;\n\n            padding-top: 100px;\n\n            display: flex;\n            justify-content: center;\n\n            background-color: #3270a0;\n        }\n\n        .a2t-logo {\n            text-align: center;\n            color: white;\n            font-size: 30px;\n        }\n\n        .a2t-container {\n            width: 400px;\n        }\n    `]\n})\nexport class A2tUiComponent {\n    constructor() { }\n}\n",
    "import {ClassProvider, Injectable, NgModule, Optional} from '@angular/core';\nimport {ActivatedRoute, Router, CanActivate} from '@angular/router';\nimport {\n    HttpClient,\n    HttpResponse,\n    HttpHeaders,\n} from \"@angular/common/http\";\nimport {HTTP_INTERCEPTORS} from '@angular/common/http';\nimport {Angular2TokenInteceptor} from './angular2-token.interceptor';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/operator/pluck';\nimport 'rxjs/add/operator/filter';\n\nimport {\n    SignInData,\n    RegisterData,\n    UpdatePasswordData,\n    ResetPasswordData,\n\n    UserType,\n    UserData,\n    AuthData,\n\n    Angular2TokenOptions\n} from './angular2-token.model';\nimport {tap} from \"rxjs/operators\";\n\n\n@Injectable()\nexport class Angular2TokenService implements CanActivate {\n\n    get currentUserType(): string {\n        if (this.atCurrentUserType != null)\n            return this.atCurrentUserType.name;\n        else\n            return null;\n    }\n\n    get currentUserData(): UserData {\n        return this.atCurrentUserData;\n    }\n\n    get currentAuthData(): AuthData {\n        return this.atCurrentAuthData;\n    }\n\n    get currentAuthHeaders(): HttpHeaders {\n        if (this.atCurrentAuthData != null) {\n            return new HttpHeaders({\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client': this.atCurrentAuthData.client,\n                'expiry': this.atCurrentAuthData.expiry,\n                'token-type': this.atCurrentAuthData.tokenType,\n                'uid': this.atCurrentAuthData.uid\n            });\n        }\n\n        return new HttpHeaders;\n    }\n\n    get apiPath(): string {\n        return this.getApiPath();\n    }\n\n    set currentAuthData(authData: AuthData) {\n        this.setAuthData(authData);\n    }\n\n    private atOptions: Angular2TokenOptions;\n    private atCurrentUserType: UserType;\n    private atCurrentAuthData: AuthData;\n    private atCurrentUserData: UserData;\n\n    constructor(private http: HttpClient,\n                @Optional() private activatedRoute: ActivatedRoute,\n                @Optional() private router: Router) {\n    }\n\n    userSignedIn(): boolean {\n        return !!this.atCurrentAuthData;\n    }\n\n    canActivate(): boolean {\n        if (this.userSignedIn())\n            return true;\n        else {\n            // Store current location in storage (usefull for redirection after signing in)\n            if (this.atOptions.signInStoredUrlStorageKey) {\n                localStorage.setItem(\n                    this.atOptions.signInStoredUrlStorageKey,\n                    window.location.pathname + window.location.search\n                );\n            }\n\n            // Redirect user to sign in if signInRedirect is set\n            if (this.router && this.atOptions.signInRedirect)\n                this.router.navigate([this.atOptions.signInRedirect]);\n\n            return false;\n        }\n    }\n\n    // Inital configuration\n    init(options?: Angular2TokenOptions) {\n\n        let defaultOptions: Angular2TokenOptions = {\n            apiPath: null,\n            apiBase: null,\n\n            signInPath: 'auth/sign_in',\n            signInRedirect: null,\n            signInStoredUrlStorageKey: null,\n\n            signOutPath: 'auth/sign_out',\n            validateTokenPath: 'auth/validate_token',\n            signOutFailedValidate: false,\n\n            registerAccountPath: 'auth',\n            deleteAccountPath: 'auth',\n            registerAccountCallback: window.location.href,\n\n            updatePasswordPath: 'auth',\n\n            resetPasswordPath: 'auth/password',\n            resetPasswordCallback: window.location.href,\n\n            userTypes: null,\n\n            oAuthBase: window.location.origin,\n            oAuthPaths: {\n                github: 'auth/github'\n            },\n            oAuthCallbackPath: 'oauth_callback',\n            oAuthWindowType: 'newWindow',\n            oAuthWindowOptions: null,\n\n            globalOptions: {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }\n        };\n\n        this.atOptions = (<any>Object).assign(defaultOptions, options);\n\n        this.tryLoadAuthData();\n    }\n\n    /**\n     *\n     * Actions\n     *\n     */\n\n    // Register request\n    registerAccount(registerData: RegisterData): Observable<Object> {\n\n        if (registerData.userType == null)\n            this.atCurrentUserType = null;\n        else {\n            this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n            delete registerData.userType;\n        }\n\n        registerData.password_confirmation = registerData.passwordConfirmation;\n        delete registerData.passwordConfirmation;\n\n        registerData.confirm_success_url = this.atOptions.registerAccountCallback;\n\n        return this.request('POST', this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n    }\n\n    // Delete Account\n    deleteAccount(): Observable<Object> {\n        return this.request('DELETE', this.getUserPath() + this.atOptions.deleteAccountPath);\n    }\n\n    // Sign in request and set storage\n    signIn(signInData: SignInData): Observable<Object> {\n\n        if (signInData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n\n        let body = JSON.stringify({\n            email: signInData.email,\n            password: signInData.password\n        });\n\n        let observ = this.request('POST', this.getUserPath() + this.atOptions.signInPath, body);\n\n        observ.pipe(\n            tap(\n                res => {\n                    if (res instanceof HttpResponse) {\n                        this.atCurrentUserData = res.body.data\n                    }\n                }, _error => {\n                    null\n                }));\n\n        return observ;\n    }\n\n    signInOAuth(oAuthType: string) {\n\n        let oAuthPath: string = this.getOAuthPath(oAuthType);\n        let callbackUrl: string = `${window.location.origin}/${this.atOptions.oAuthCallbackPath}`;\n        let oAuthWindowType: string = this.atOptions.oAuthWindowType;\n        let authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n        if (oAuthWindowType == 'newWindow') {\n            let oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n            let windowOptions = '';\n\n            if (oAuthWindowOptions) {\n                for (let key in oAuthWindowOptions) {\n                    windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n                }\n            }\n\n            let popup = window.open(\n                authUrl,\n                '_blank',\n                `closebuttoncaption=Cancel${windowOptions}`\n            );\n            return this.requestCredentialsViaPostMessage(popup);\n        } else if (oAuthWindowType == 'sameWindow') {\n            window.location.href = authUrl;\n        } else {\n            throw `Unsupported oAuthWindowType \"${oAuthWindowType}\"`;\n        }\n    }\n\n    processOAuthCallback(): void {\n        this.getAuthDataFromParams();\n    }\n\n    // Sign out request and delete storage\n    signOut(): Observable<Object> {\n        let observ = this.request('DELETE', this.getUserPath() + this.atOptions.signOutPath);\n\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('client');\n        localStorage.removeItem('expiry');\n        localStorage.removeItem('tokenType');\n        localStorage.removeItem('uid');\n\n        this.atCurrentAuthData = null;\n        this.atCurrentUserType = null;\n        this.atCurrentUserData = null;\n\n        return observ;\n    }\n\n    // Validate token request\n    validateToken(): Observable<Object> {\n        let observ = this.request('GET', this.getUserPath() + this.atOptions.validateTokenPath);\n\n        observ.pipe(\n            tap(\n                res => {\n                    if (res instanceof HttpResponse) {\n                        this.atCurrentUserData = res.body.data\n                    }\n                },\n                error => {\n                    if (error.status === 401 && this.atOptions.signOutFailedValidate) {\n                        this.signOut();\n                    }\n                }\n            ));\n\n        return observ;\n    }\n\n    // Update password request\n    updatePassword(updatePasswordData: UpdatePasswordData): Observable<Object> {\n\n        if (updatePasswordData.userType != null)\n            this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n\n        let args: any;\n\n        if (updatePasswordData.passwordCurrent == null) {\n            args = {\n                password: updatePasswordData.password,\n                password_confirmation: updatePasswordData.passwordConfirmation\n            }\n        } else {\n            args = {\n                current_password: updatePasswordData.passwordCurrent,\n                password: updatePasswordData.password,\n                password_confirmation: updatePasswordData.passwordConfirmation\n            };\n        }\n\n        if (updatePasswordData.resetPasswordToken) {\n            args.reset_password_token = updatePasswordData.resetPasswordToken;\n        }\n\n        let body = JSON.stringify(args);\n        return this.request('PUT', this.getUserPath() + this.atOptions.updatePasswordPath, body);\n    }\n\n    // Reset password request\n    resetPassword(resetPasswordData: ResetPasswordData): Observable<Object> {\n\n        if (resetPasswordData.userType == null)\n            this.atCurrentUserType = null;\n        else\n            this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n\n        let body = JSON.stringify({\n            email: resetPasswordData.email,\n            redirect_url: this.atOptions.resetPasswordCallback\n        });\n\n        return this.request('POST', this.getUserPath() + this.atOptions.resetPasswordPath, body);\n    }\n\n    /**\n     *\n     * HTTP Wrappers\n     *\n     */\n\n    // get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    //     return this.request(this.mergeRequestOptionsArgs({\n    //         url: this.getApiPath() + url,\n    //         method: 'GET'\n    //     }, options));\n    // }\n    //\n    // post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    //     return this.request(this.mergeRequestOptionsArgs({\n    //         url: this.getApiPath() + url,\n    //         method: 'POST',\n    //         body: body\n    //     }, options));\n    // }\n    //\n    // put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    //     return this.request(this.mergeRequestOptionsArgs({\n    //         url: this.getApiPath() + url,\n    //         method: 'PUT',\n    //         body: body\n    //     }, options));\n    // }\n    //\n    // delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    //     return this.request(this.mergeRequestOptionsArgs({\n    //         url: this.getApiPath() + url,\n    //         method: 'DELETE'\n    //     }, options));\n    // }\n\n\n    // Construct and send Http request\n    request(method: string, url: string, body?: any): Observable<Object> {\n\n        const options: { [key: string]: any; } = {};\n        let baseHeaders: { [key: string]: string; } = this.atOptions.globalOptions.headers;\n\n        // Get auth data from local storage\n        this.getAuthDataFromStorage();\n\n        // Merge auth headers to request if set\n        if (this.atCurrentAuthData != null) {\n            (<any>Object).assign(baseHeaders, {\n                'access-token': this.atCurrentAuthData.accessToken,\n                'client': this.atCurrentAuthData.client,\n                'expiry': this.atCurrentAuthData.expiry,\n                'token-type': this.atCurrentAuthData.tokenType,\n                'uid': this.atCurrentAuthData.uid\n            });\n        }\n\n        options.headers = new HttpHeaders(baseHeaders);\n        options.body = body;\n\n        let response = this.http.request(method, this.getApiPath() + url, options);\n        this.handleResponse(response);\n\n        return response;\n    }\n\n\n    // Check if response is complete and newer, then update storage\n    private handleResponse(response: Observable<Object>): void {\n        response.pipe(\n            tap(res => {\n                this.getAuthHeadersFromResponse(<any>res);\n            }, error => {\n                this.getAuthHeadersFromResponse(<any>error);\n            }));\n    }\n\n    /**\n     *\n     * Get Auth Data\n     *\n     */\n\n    // Try to load auth data\n    private tryLoadAuthData(): void {\n\n        let userType = this.getUserTypeByName(localStorage.getItem('userType'));\n\n        if (userType)\n            this.atCurrentUserType = userType;\n\n        this.getAuthDataFromStorage();\n\n        if (this.activatedRoute)\n            this.getAuthDataFromParams();\n\n        if (this.atCurrentAuthData)\n            this.validateToken();\n    }\n\n    // Parse Auth data from response\n    private getAuthHeadersFromResponse(data: any): void {\n        let headers = data.headers;\n\n        let authData: AuthData = {\n            accessToken: headers.get('access-token'),\n            client: headers.get('client'),\n            expiry: headers.get('expiry'),\n            tokenType: headers.get('token-type'),\n            uid: headers.get('uid')\n        };\n\n        this.setAuthData(authData);\n    }\n\n    // Parse Auth data from post message\n    private getAuthDataFromPostMessage(data: any): void {\n        let authData: AuthData = {\n            accessToken: data['auth_token'],\n            client: data['client_id'],\n            expiry: data['expiry'],\n            tokenType: 'Bearer',\n            uid: data['uid']\n        };\n\n        this.setAuthData(authData);\n    }\n\n    // Try to get auth data from storage.\n    private getAuthDataFromStorage(): void {\n\n        let authData: AuthData = {\n            accessToken: localStorage.getItem('accessToken'),\n            client: localStorage.getItem('client'),\n            expiry: localStorage.getItem('expiry'),\n            tokenType: localStorage.getItem('tokenType'),\n            uid: localStorage.getItem('uid')\n        };\n\n        if (this.checkAuthData(authData))\n            this.atCurrentAuthData = authData;\n    }\n\n    // Try to get auth data from url parameters.\n    private getAuthDataFromParams(): void {\n        if (this.activatedRoute.queryParams) // Fix for Testing, needs to be removed later\n            this.activatedRoute.queryParams.subscribe(queryParams => {\n                let authData: AuthData = {\n                    accessToken: queryParams['token'] || queryParams['auth_token'],\n                    client: queryParams['client_id'],\n                    expiry: queryParams['expiry'],\n                    tokenType: 'Bearer',\n                    uid: queryParams['uid']\n                };\n\n                if (this.checkAuthData(authData))\n                    this.atCurrentAuthData = authData;\n            });\n    }\n\n    /**\n     *\n     * Set Auth Data\n     *\n     */\n\n    // Write auth data to storage\n    private setAuthData(authData: AuthData): void {\n\n        if (this.checkAuthData(authData)) {\n\n            this.atCurrentAuthData = authData;\n\n            localStorage.setItem('accessToken', authData.accessToken);\n            localStorage.setItem('client', authData.client);\n            localStorage.setItem('expiry', authData.expiry);\n            localStorage.setItem('tokenType', authData.tokenType);\n            localStorage.setItem('uid', authData.uid);\n\n            if (this.atCurrentUserType != null)\n                localStorage.setItem('userType', this.atCurrentUserType.name);\n\n        }\n    }\n\n    /**\n     *\n     * Validate Auth Data\n     *\n     */\n\n    // Check if auth data complete and if response token is newer\n    private checkAuthData(authData: AuthData): boolean {\n\n        if (\n            authData.accessToken != null &&\n            authData.client != null &&\n            authData.expiry != null &&\n            authData.tokenType != null &&\n            authData.uid != null\n        ) {\n            if (this.atCurrentAuthData != null)\n                return authData.expiry >= this.atCurrentAuthData.expiry;\n            else\n                return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * Construct Paths / Urls\n     *\n     */\n\n    private getUserPath(): string {\n        if (this.atCurrentUserType == null)\n            return '';\n        else\n            return this.atCurrentUserType.path + '/';\n    }\n\n    private getApiPath(): string {\n        let constructedPath = '';\n\n        if (this.atOptions.apiBase != null)\n            constructedPath += this.atOptions.apiBase + '/';\n\n        if (this.atOptions.apiPath != null)\n            constructedPath += this.atOptions.apiPath + '/';\n\n        return constructedPath;\n    }\n\n    private getOAuthPath(oAuthType: string): string {\n        let oAuthPath: string;\n\n        oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n\n        if (oAuthPath == null)\n            oAuthPath = `/auth/${oAuthType}`;\n\n        return oAuthPath;\n    }\n\n    private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n        let url: string;\n\n        url = `${this.atOptions.oAuthBase}/${oAuthPath}`;\n        url += `?omniauth_window_type=${windowType}`;\n        url += `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n        if (this.atCurrentUserType != null)\n            url += `&resource_class=${this.atCurrentUserType.name}`;\n\n        return url;\n    }\n\n    /**\n     *\n     * OAuth\n     *\n     */\n\n    private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n        let pollerObserv = Observable.interval(500);\n\n        let responseObserv = Observable.fromEvent(window, 'message').pluck('data')\n            .filter(this.oAuthWindowResponseFilter);\n\n        let responseSubscription = responseObserv.subscribe(\n            this.getAuthDataFromPostMessage.bind(this)\n        );\n\n        let pollerSubscription = pollerObserv.subscribe(() => {\n            if (authWindow.closed)\n                pollerSubscription.unsubscribe();\n            else\n                authWindow.postMessage('requestCredentials', '*');\n        });\n\n        return responseObserv;\n    }\n\n    private oAuthWindowResponseFilter(data: any): any {\n        if (data.message == 'deliverCredentials' || data.message == 'authFailure')\n            return data;\n    }\n\n    /**\n     *\n     * Utilities\n     *\n     */\n\n    // Match user config by user config name\n    private getUserTypeByName(name: string): UserType {\n        if (name == null || this.atOptions.userTypes == null)\n            return null;\n\n        return this.atOptions.userTypes.find(\n            userType => userType.name === name\n        );\n    }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { SignInData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_IN_FORM } from '../';\n\n@Component({\n    selector:   'a2t-sign-in',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Sign In</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign In</a2t-form>\n        <a2t-links case=\"sign-in\"></a2t-links>\n    `\n})\nexport class A2tSignInComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(SIGN_IN_FORM);\n        this._formService.submit$.subscribe(\n            (data: SignInData) => this._sessionService.signIn(data).subscribe(\n                (res: any) =>   this._handleSuccess(res),\n                (error: any) => this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { RegisterData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { SIGN_UP_FORM } from '../';\n\n@Component({\n    selector:       'a2t-sign-up',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline>Sign Up</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Sign Up</a2t-form>\n        <a2t-links case=\"sign-up\"></a2t-links>\n    `\n})\nexport class A2tSignUpComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(SIGN_UP_FORM);\n        this._formService.submit$.subscribe(\n            (data: RegisterData) => this._sessionService.registerAccount(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._errors = null;\n        this._formService.unlockSubmit();\n        this._router.navigate(['restricted']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors.full_messages;\n        this._formService.unlockSubmit();\n    }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { ResetPasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { RESET_PASSWORD_FORM } from '../';\n\n@Component({\n    selector:       'a2t-reset-password',\n    providers:      [A2tFormService],\n    template: `\n        <a2t-headline *ngIf=\"!_emailSend\">Reset your Password</a2t-headline>\n        <a2t-form *ngIf=\"!_emailSend\">Reset Password</a2t-form>\n        <p class=\"email-send-text\" *ngIf=\"_emailSend\">\n            If the entered email is registered we will send instruction on how to reset your password.\n        </p>\n        <a2t-links *ngIf=\"!_emailSend\" case=\"reset-password\"></a2t-links>\n    `,\n    styles: [`\n        .email-send-text {\n            background-color: #72c380;\n            color: white;\n            font-size: 16pt;\n            text-align: center;\n            padding: 20px;\n            border-radius: 3px;\n        }\n    `]\n})\nexport class A2tResetPasswordComponent {\n\n    _emailSend: boolean = false;\n\n    constructor(\n        private _formService: A2tFormService,\n        private _sessionService: Angular2TokenService\n    ) {\n        this._formService.initForm(RESET_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: ResetPasswordData) => this._sessionService.resetPassword(data).subscribe(\n                res =>      this._handleSuccess(),\n                error =>    this._handleError()\n            )\n        );\n    }\n\n    private _handleSuccess() {\n        this._emailSend = true;\n    }\n\n    private _handleError() {\n        this._emailSend = true;\n    }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Angular2TokenService } from '../../angular2-token.service';\n\nimport { UpdatePasswordData } from '../../angular2-token.model';\nimport { A2tFormService } from '../a2t-shared';\nimport { UPDATE_PASSWORD_FORM } from '../';\n\n@Component({\n    selector:   'a2t-update-password',\n    providers:  [A2tFormService],\n    template: `\n        <a2t-headline>Update your Password</a2t-headline>\n        <a2t-error [errors]=\"_errors\"></a2t-error>\n        <a2t-form>Update Password</a2t-form>\n    `\n})\nexport class A2tUpdatePasswordComponent {\n\n    _errors: string[];\n\n    constructor(\n        public _formService: A2tFormService,\n        public _sessionService: Angular2TokenService,\n        public _router: Router\n    ) {\n        this._formService.initForm(UPDATE_PASSWORD_FORM);\n        this._formService.submit$.subscribe(\n            (data: UpdatePasswordData) => this._sessionService.updatePassword(data).subscribe(\n                res =>      this._handleSuccess(res),\n                error =>    this._handleError(error)\n            )\n        );\n    }\n\n    private _handleSuccess(data: any) {\n        this._router.navigate(['session/sign-in']);\n    }\n\n    private _handleError(error: any) {\n        this._errors = error.json().errors;\n        this._formService.unlockSubmit();\n    }\n}\n",
    "import { ModuleWithProviders } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport { A2tUiComponent } from './a2t-ui.component';\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\nconst routes: Routes = [{\n        path: 'session',\n        component: A2tUiComponent,\n        children: [\n            { path: 'sign-in', component: A2tSignInComponent },\n            { path: 'sign-up', component: A2tSignUpComponent },\n            { path: 'reset-password', component: A2tResetPasswordComponent },\n            {\n                path: 'update-password',\n                component: A2tUpdatePasswordComponent,\n                canActivate: [Angular2TokenService]\n            }\n        ]\n}];\n\nexport const a2tRoutes = RouterModule.forChild(routes);\n",
    "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { Angular2TokenService } from '../angular2-token.service';\n\nimport {\n    a2tRoutes,\n    A2tUiComponent,\n    A2tSharedModule,\n} from './';\n\nimport { A2tSignInComponent } from './a2t-sign-in/a2t-sign-in.component';\nimport { A2tSignUpComponent } from './a2t-sign-up/a2t-sign-up.component';\nimport { A2tResetPasswordComponent } from './a2t-reset-password/a2t-reset-password.component';\nimport { A2tUpdatePasswordComponent } from './a2t-update-password/a2t-update-password.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        A2tSharedModule,\n        a2tRoutes\n    ],\n    declarations: [\n        A2tUiComponent,\n        A2tSignInComponent,\n        A2tSignUpComponent,\n        A2tResetPasswordComponent,\n        A2tUpdatePasswordComponent\n    ]\n})\nexport class A2tUiModule { }",
    "import {Injectable} from '@angular/core';\nimport {\n    HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse, HttpErrorResponse\n}\n    from '@angular/common/http';\nimport {Angular2TokenService} from './angular2-token.service';\nimport {Observable} from 'rxjs/Observable';\nimport {tap} from 'rxjs/operators';\nimport {AuthData} from \"./angular2-token.model\";\n\n@Injectable()\nexport class Angular2TokenInteceptor implements HttpInterceptor {\n    apiPath: string;\n\n    constructor(private _tokenService: Angular2TokenService,) {\n        this.apiPath = this._tokenService.apiPath;\n    }\n\n    intercept(req: HttpRequest<any>,\n              next: HttpHandler): Observable<HttpEvent<any>> {\n        console.log('In token interceptor, request : ', req,\n            this._tokenService.currentAuthHeaders);\n        let headersWithAuth = this._tokenService.currentAuthHeaders;\n        const apiPath =\n            req.headers.keys().forEach(key => {\n                headersWithAuth = headersWithAuth.append(key, req.headers.get(key))\n            });\n        console.log('In intercept request, new headers : ', headersWithAuth);\n        if (req.url.match(this.apiPath)) {\n            req = req.clone({headers: headersWithAuth});\n            const authHeaders = this._tokenService.currentAuthHeaders;\n            authHeaders.keys().forEach(key => {\n                req.headers.append(key, authHeaders.get(key))\n            });\n        }\n\n\n        return next.handle(req)\n            .pipe(\n                tap(res => {\n                        console.log('In token interceptor, evt : ', res);\n                        if (res instanceof HttpResponse && res.url.match(this.apiPath)) {\n                            console.log('---> status:', res.status);\n                            console.log('---> filter:', req.params.get('filter'));\n                            this.getAuthHeadersFromResponse(<any>res);\n                        }\n                    },\n                    err => {\n                        if (err instanceof HttpErrorResponse && err.url.match(this.apiPath)) {\n                            console.log('In token interceptor, err : ', err);\n                            this.getAuthHeadersFromResponse(<any>err);\n                        } else {\n                            console.log(\"Auth Interceptor, non HTTP error - \", err)\n                        }\n\n\n                    }\n                )\n            )\n    }\n\n\n    // Parse Auth data from response\n    private getAuthHeadersFromResponse(data: any): void {\n        let headers = data.headers;\n\n        let authData: AuthData = {\n            accessToken: headers.get('access-token'),\n            client: headers.get('client'),\n            expiry: headers.get('expiry'),\n            tokenType: headers.get('token-type'),\n            uid: headers.get('uid')\n        };\n\n        this._tokenService.currentAuthData = authData;\n    }\n\n}"
  ],
  "names": [
    "A2tFormService",
    "this",
    "submit$",
    "EventEmitter",
    "submitLock",
    "prototype",
    "initForm",
    "fields",
    "_createFormGroup",
    "submit",
    "emit",
    "formGroup",
    "value",
    "unlockSubmit",
    "reset",
    "group",
    "forEach",
    "question",
    "key",
    "FormControl",
    "validators",
    "FormGroup",
    "type",
    "Injectable",
    "BaseField",
    "options",
    "label",
    "undefined",
    "SIGN_IN_FORM",
    "Validators",
    "required",
    "minLength",
    "SIGN_UP_FORM",
    "RESET_PASSWORD_FORM",
    "UPDATE_PASSWORD_FORM",
    "A2tFormFieldComponent",
    "ngOnInit",
    "_control",
    "form",
    "controls",
    "Object",
    "defineProperty",
    "get",
    "valid",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "Input",
    "A2tFormComponent",
    "_formService",
    "A2tLinksComponent",
    "case",
    "A2tErrorComponent",
    "errors",
    "A2tHeadlineComponent",
    "A2tSharedModule",
    "NgModule",
    "imports",
    "CommonModule",
    "ReactiveFormsModule",
    "RouterModule",
    "declarations",
    "exports",
    "A2tUiComponent",
    "Angular2TokenService",
    "http",
    "activatedRoute",
    "router",
    "atCurrentUserType",
    "name",
    "atCurrentUserData",
    "atCurrentAuthData",
    "set",
    "authData",
    "setAuthData",
    "HttpHeaders",
    "access-token",
    "accessToken",
    "client",
    "expiry",
    "token-type",
    "tokenType",
    "uid",
    "getApiPath",
    "userSignedIn",
    "canActivate",
    "atOptions",
    "signInStoredUrlStorageKey",
    "localStorage",
    "setItem",
    "window",
    "location",
    "pathname",
    "search",
    "signInRedirect",
    "navigate",
    "init",
    "defaultOptions",
    "apiPath",
    "apiBase",
    "signInPath",
    "signOutPath",
    "validateTokenPath",
    "signOutFailedValidate",
    "registerAccountPath",
    "deleteAccountPath",
    "registerAccountCallback",
    "href",
    "updatePasswordPath",
    "resetPasswordPath",
    "resetPasswordCallback",
    "userTypes",
    "oAuthBase",
    "origin",
    "oAuthPaths",
    "github",
    "oAuthCallbackPath",
    "oAuthWindowType",
    "oAuthWindowOptions",
    "globalOptions",
    "headers",
    "Content-Type",
    "Accept",
    "assign",
    "tryLoadAuthData",
    "registerAccount",
    "registerData",
    "userType",
    "getUserTypeByName",
    "passwordConfirmation",
    "request",
    "getUserPath",
    "JSON",
    "stringify",
    "deleteAccount",
    "signIn",
    "signInData",
    "_this",
    "body",
    "email",
    "password",
    "observ",
    "pipe",
    "tap",
    "res",
    "HttpResponse",
    "data",
    "_error",
    "signInOAuth",
    "oAuthType",
    "oAuthPath",
    "getOAuthPath",
    "callbackUrl",
    "authUrl",
    "getOAuthUrl",
    "windowOptions",
    "popup",
    "open",
    "requestCredentialsViaPostMessage",
    "processOAuthCallback",
    "getAuthDataFromParams",
    "signOut",
    "removeItem",
    "validateToken",
    "error",
    "status",
    "updatePassword",
    "updatePasswordData",
    "passwordCurrent",
    "password_confirmation",
    "current_password",
    "resetPasswordToken",
    "reset_password_token",
    "resetPassword",
    "resetPasswordData",
    "redirect_url",
    "method",
    "url",
    "baseHeaders",
    "getAuthDataFromStorage",
    "response",
    "handleResponse",
    "getAuthHeadersFromResponse",
    "getItem",
    "getAuthDataFromPostMessage",
    "checkAuthData",
    "queryParams",
    "subscribe",
    "path",
    "constructedPath",
    "windowType",
    "encodeURIComponent",
    "authWindow",
    "pollerObserv",
    "Observable",
    "interval",
    "responseObserv",
    "fromEvent",
    "pluck",
    "filter",
    "oAuthWindowResponseFilter",
    "pollerSubscription",
    "bind",
    "closed",
    "unsubscribe",
    "postMessage",
    "message",
    "find",
    "HttpClient",
    "ActivatedRoute",
    "decorators",
    "Optional",
    "Router",
    "A2tSignInComponent",
    "_sessionService",
    "_router",
    "_handleSuccess",
    "_handleError",
    "_errors",
    "json",
    "providers",
    "A2tSignUpComponent",
    "full_messages",
    "A2tResetPasswordComponent",
    "_emailSend",
    "A2tUpdatePasswordComponent",
    "routes",
    "component",
    "children",
    "a2tRoutes",
    "forChild",
    "A2tUiModule",
    "Angular2TokenInteceptor",
    "_tokenService",
    "intercept",
    "req",
    "next",
    "console",
    "log",
    "currentAuthHeaders",
    "headersWithAuth",
    "keys",
    "append",
    "match",
    "clone",
    "authHeaders_1",
    "handle",
    "params",
    "err",
    "HttpErrorResponse",
    "currentAuthData"
  ],
  "mappings": "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"
}
